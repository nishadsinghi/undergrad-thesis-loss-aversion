Note: I have documented ROOT/LCA/dataset1/fullAndAblation/fitFullModel.py fairly extensively, and I highly recommend reading it thoroughly.
Everything else is very similar, and if you understand this, you should be able to understand all the other scripts.

There are several types of LCA models we are fitting

/fullAndAblation
This contains LCA models that are analogous to the DDM models
1) Full: loss aversion (valuation bias) + predecisional (starting) bias + fixed utility bias
2) Restricted models, by removing one of these mechanisms at a time

    /fullAndAblation/savedModels
    - For every model, multiple (5-10) chains of the fitting script were run in parallel. The logs from all these are saved as pickle files in savedModels.
    The best fitting parameters across all runs are present in bestFit.txt (generated using getBestFitParams.py). Data simulated using these models is
    present in simulatedData (generated using simulateData.py).
    - computeModelCosts.py takes this simulated data and computes chi^2 fit statistics for all models, and stores them in modelCosts.csv.
    - files with the names plot*.py make some plots (should be clear from filename)


We also consider two additional biasing mechanisms: unequal attention, unequal thresholds
- We first consider a model with all five mechanisms. This is fitted using fit5BiasFullModel.py and the parameters are stored in /savedModels/5BiasFullModel.
  You can simulate data from this model using simulate5BiasModelData.py, and use this data to compute the model cost by running compute5BiasModelCost.py.

- Next, we examine mimicry among models with unequal attention and loss aversion; and models with unequal thresholds and predecisional bias
    - First, we fit five models, each with a single biasing mechanism. Unfortunately, the scripts that were used to fit these models, and the pickle files
      of the parameters are not present, but it should be easy to do if you understand how the fitting scripts work in general. The best fitting parameters
      for each of these models are present in simulateSingleBiasModelsData.py. This script can be used to simulate data from these models, and subsequently store it
      in /simulatedData. This data can be then used to compute model costs using computeSingleBiasModelCosts.py.
    - /mimicry
        - Next, we generate model using a model with unequal attention (/unequal thresholds) and fit models with loss aversion/ predecisional bias/ fixed utility bias (only one at a time)
          to this data. For example, models fitted onto data generated by the model with unequal attention is in /mimicry/unequalAttention.
          First of all, you would need to simulate data using the model with unequal attention. You can do so by running generateUnequalAttentionData.py (which stores this data in
          unequalAttentionSimulatedData.csv). Then you can fit the three models using fit<modelName>.py. You can simulate trials using these fitted models by running simulateData.py,
          and then compute the chi^2 values using computeModelCosts.py (you will also need another set of simulations of the unequal attention model for baseline, which you can get
          by running generateUnequalAttentionData.py one more time).





